"""
Стек — абстрактный тип данных, представляющий список элементов, организованных по принципу LIFO
(англ. last in — first out, «последним пришёл — первым вышел»). Чаще всего принцип работы стека сравнивают со стопкой
тарелок: чтобы взять вторую сверху, нужно снять верхнюю.
Или с магазином в огнестрельном оружии: стрельба начнётся с патрона, заряженного последним.

Нужно реализовать класс Stack со следующими методами:
is_empty — проверка стека на пустоту. Метод возвращает True или False;
push — добавляет новый элемент на вершину стека. Метод ничего не возвращает;
pop — удаляет верхний элемент стека. Стек изменяется. Метод возвращает верхний элемент стека;
peek — возвращает верхний элемент стека, но не удаляет его. Стек не меняется;
size — возвращает количество элементов в стеке.
"""
class Stack():
    def __init__(self):
        self._stack = []

    def is_empty(self):
        return False if len(self._stack) != 0 else True

    def push(self, element):
        self._stack.insert(0,element)

    def pop(self):
        return self._stack.pop(0) if len(self._stack) > 0 else None

    def peek(self):
        return self._stack[0] if len(self._stack) > 0 else None

    def size(self):
        return len(self._stack)

"""
Используя стек из задания 1, решите задачу на проверку сбалансированности скобок. Сбалансированность скобок означает, 
что каждый открывающий символ имеет соответствующий ему закрывающий, и пары скобок правильно вложены друг в друга.
Пример сбалансированных последовательностей скобок:

(((([{}]))))
[([])((([[[]]])))]{()}
{{[()]}}
Несбалансированные последовательности:

}{}
{{[(])]}}
[[{())}]
Программа ожидает на вход строку со скобками. На выход сообщение: «Сбалансированно», если строка корректная, и «Несбалансированно», если строка составлена неверно.
"""
def check_gramar(string='{{[(])]}}'):
    grammar = {'{':'}','[':']','(':')'}
    s = Stack()
    for key in string:
        if key in grammar.keys():
            s.push(key)
        elif grammar[s.peek()] == key:
            s.pop()
        else:
            return 'Несбалансированно'
    return 'Сбалансированно'

if __name__ == '__main__':
    print(check_gramar())

